@page "/mappings/create"
@page "/mappings/edit/{Id:guid}"
@using System.Text.Json
@using Ship.Ses.Extractor.UI.BlazorWeb.Models.ApiClient
@using Ship.Ses.Extractor.UI.BlazorWeb.Models.UI
@using Ship.Ses.Extractor.UI.BlazorWeb.Components.Common 
@using Ship.Ses.Extractor.UI.BlazorWeb.Components.MappingDesigner 
@inject FhirResourceService FhirResourceService
@inject MappingService MappingService
@inject NavigationManager NavigationManager

<PageTitle>@(_isEditing ? "Edit Mapping" : "Create Mapping") - EMR-FHIR Mapping Tool</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@(_isEditing ? "Edit Mapping" : "Create Mapping")</h1>
        <div>
            <button class="btn btn-outline-secondary me-2" @onclick="GoBack">Cancel</button>
            <button class="btn btn-primary" @onclick="SaveMapping">Save Mapping</button>
        </div>
    </div>

    @if (_loading)
    {
        <Loading Message="Loading..." />
    }
    else
    {
        <div class="card mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="mappingName" class="form-label">Mapping Name</label>
                        <input type="text" class="form-control" id="mappingName" @bind="_mapping.Name" placeholder="Enter a name for this mapping">
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="resourceType" class="form-label">FHIR Resource Type</label>
                        <select class="form-select" id="resourceType" value="@_mapping.FhirResourceTypeId" @onchange="OnResourceTypeChanged">
                            <option value="0">-- Select Resource Type --</option>
                            @foreach (var resourceType in _resourceTypes)
                            {
                                <option value="@resourceType.Id">@resourceType.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="mappingDescription" class="form-label">Description</label>
                    <textarea class="form-control" id="mappingDescription" @bind="_mapping.Description" rows="2" placeholder="Optional description"></textarea>
                </div>
            </div>
        </div>

        @if (_mapping.FhirResourceTypeId > 0)
        {
            <MappingDesigner ResourceTypeId="_mapping.FhirResourceTypeId"
                             ResourceTypeName="@_mapping.FhirResourceTypeName"
                             ExistingMappings="_designerMappings"
                             OnMappingsChanged="HandleMappingsChangedFromDesigner" />
        }
        else
        {
            <div class="alert alert-info">
                Please select a FHIR Resource Type to start creating mappings.
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private MappingModel _mapping = new();
    private List<FhirResourceTypeModel> _resourceTypes = new();
    private bool _loading = true;
    private bool _isEditing => Id.HasValue;

    // Use a temporary list to hold mappings from the designer,
    // which will then be assigned to _mapping.Mappings before saving.
    private List<FieldMappingConfigurationModel> _designerMappings = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _resourceTypes = await FhirResourceService.GetResourceTypesAsync();

            if (_isEditing)
            {
                var loadedMapping = await MappingService.GetMappingAsync(Id.Value);
                _mapping = loadedMapping;
                // Important: Convert _mapping.Mappings (which is List<ColumnMappingModel>)
                // to List<FieldMappingConfigurationModel> for the designer.
                // Assuming MappingModel.Mappings is already List<FieldMappingConfigurationModel>
                // based on our previous discussion and changes.
                _designerMappings = loadedMapping.Mappings ?? new List<FieldMappingConfigurationModel>();
            }
            else
            {
                _mapping = new MappingModel
                {
                    Id = Guid.NewGuid(),
                    CreatedDate = DateTime.UtcNow,
                    LastModifiedDate = DateTime.UtcNow,
                    Mappings = new List<FieldMappingConfigurationModel>() // Initialize empty list
                };
                _designerMappings = _mapping.Mappings; // Point to the same list for new mappings
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
            // Add alert here
        }
        finally
        {
            _loading = false;
        }
    }

    private void OnResourceTypeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            _mapping.FhirResourceTypeId = selectedId;
            var resourceType = _resourceTypes.FirstOrDefault(rt => rt.Id == selectedId);
            if (resourceType != null)
            {
                _mapping.FhirResourceTypeName = resourceType.Name;
            }
            // Clear current mappings if resource type changes significantly
            _designerMappings = new List<FieldMappingConfigurationModel>();
            _mapping.Mappings = _designerMappings; // Update _mapping's reference
        }
        else
        {
            _mapping.FhirResourceTypeId = 0;
            _mapping.FhirResourceTypeName = null;
            _designerMappings = new List<FieldMappingConfigurationModel>();
            _mapping.Mappings = _designerMappings; // Update _mapping's reference
        }
    }

    // New handler for mappings coming from MappingDesigner
    private void HandleMappingsChangedFromDesigner(List<FieldMappingConfigurationModel> updatedMappings)
    {
        _designerMappings = updatedMappings; // Update the list held by this page
    }

    private async Task SaveMapping()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_mapping.Name))
            {
                Console.Error.WriteLine("Mapping name is required.");
                // alertComponent?.Show("Mapping name is required.", "danger");
                return;
            }

            if (_mapping.FhirResourceTypeId <= 0)
            {
                Console.Error.WriteLine("FHIR Resource Type is required.");
                // alertComponent?.Show("FHIR Resource Type is required.", "danger");
                return;
            }

            // Assign the mappings from the designer to the main mapping model
            _mapping.Mappings = _designerMappings;
            _mapping.LastModifiedDate = DateTime.UtcNow;

            // This assumes MappingModel.Mappings is List<FieldMappingConfigurationModel>
            // or that your MappingService/API DTOs handle the conversion.

            if (_isEditing)
            {
                await MappingService.UpdateMappingAsync(_mapping);
            }
            else
            {
                _mapping.CreatedDate = DateTime.UtcNow;
                await MappingService.CreateMappingAsync(_mapping);
            }

            NavigationManager.NavigateTo("/mappings");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving mapping: {ex.Message}");
            // alertComponent?.Show($"Error saving mapping: {ex.Message}", "danger");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/mappings");
    }
}